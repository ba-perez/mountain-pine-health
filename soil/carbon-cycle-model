# ==============================================================================
# SIMULATE SOIL CARBON DYNAMICS SIMULATION INTEGRATING FIELD AND iLAND DATA
# ==============================================================================
# 
# AUTHORS: 
#   Werner Rammer (iLand code)
#   Barbara M. P. B. de Araujo (carbon cycle code; field data)
#   Christina Dollinger (iLand simulation data)
# 
# LAST UPDATED: 2025.06.19
# 
# DESCRIPTION:
# This script implements a three-pool soil carbon model to simulate carbon
# dynamics across elevation gradients following mountain pine die-off.
# The model considers:
#   - Young labile pool (YL): Fast-decomposing litter
#   - Young refractory pool (YR): Slow-decomposing deadwood
#   - Soil organic matter (SOC): Stable carbon pool
# 
# RESEARCH QUESTION EXPLORED IN THIS SCRIPT:
#   - when do soil organic carbon (SOC) dynamics reach a tipping point
#       and shift from a carbon sink to the atmosphere (SOC gain)
#       to a carbon source (SOC loss) after mountain pine death?
#
# ==============================================================================

#### FIRST THINGS FIRST ####

# Clear workspace and optimise memory
rm(list = ls())
gc()

# Set global options
options(
  scipen = 999,    # Disable scientific notation
  digits = 7
)

# Set working directory (modify path as needed)
setwd(r"(\\path\to\work\directory)")

# Load required packages
library(dplyr)     # Data manipulation
library(ggplot2)   # Plotting
library(gridExtra) # Multi-panel plots
library(grid)      # Grid graphics
library(cowplot)   # Plot arrangements

# ==============================================================================
#### CORE MODEL ####
# ==============================================================================

# Function calculateYear:
# Calculates carbon pools for one time step (single-year)
# Returns list w/ updated carbon pools
# Based on (and equations refer to):
# Andrén, O., and T. Kätterer (1997). ICBM: the introductory carbon balance
# model for exploration of soil carbon balances. Ecological applications
# 7.4: 1226-1236. doi: 10.1890/1051-0761(1997)007[1226:ITICBM]2.0.CO;2       

calculateYear <- function(
    InputLab_C,  # Input to the labile pool (litter) (t/ha)
    InputRef_C,  # Input to the refractory pool (deadwood) (t/ha)
    YL_C_init,   # Initial carbon in young labile pool (t/ha)
    YR_C_init,   # Initial carbon in young refractory pool (t/ha)
    SOC_C_init,  # Initial carbon in soil organic matter (t/ha)
    Kyl,         # Litter decomposition rate
    Kyr,         # Deadwood decomposition rate
    RE,          # Climate factor 're'
    sp,          # List of soil parameters
    Ko           # SOC decomposition rate
) {
  
  # Timestep (annual)
  t <- 1 
  
  # Calculate total carbon input
  total_in_C <- InputLab_C + InputRef_C
  
  # --- Steady state calculations ---
  
  # Young labile pool (Yl) steady state C (Equation A13)
  ylss <- InputLab_C / (Kyl * RE)  
  
  # eta l in the paper
  #cl <- sp$el * (1 - sp$mH) / sp$qb - sp$mH * (1 - sp$el) / sp$qh # calculations involving C/N ratio
  
  # Young refractory pool (Yr) steady state C (Equation A14)
  yrss <- InputRef_C / (Kyr * RE) 
  
  # Soil organic matter (SOC) steady state C 
  oss <- sp$mH * total_in_C / (Ko * RE)  
  
  # Auxiliary calculations
  al <- sp$mH * (Kyl * RE * YL_C_init - InputLab_C) / ((Ko - Kyl) * RE)
  ar <- sp$mH * (Kyr * RE * YR_C_init - InputRef_C) / ((Ko - Kyr) * RE)
  
  # --- Update state variables ---
  
  # Precalculations
  lfactor <- exp(-Kyl * RE * t)
  rfactor <- exp(-Kyr * RE * t)
  
  # Young labile pool (Equation A18)
  YL_C <- ylss + (YL_C_init - ylss) * lfactor
  
  # Young refractory pool (Equation A19)
  YR_C <- yrss + (YR_C_init - yrss) * rfactor
  
  # SOC pool
  SOC_C <- oss + (SOC_C_init - oss - al - ar) * exp(-Ko * RE * t) + al * lfactor + ar * rfactor
  
  # --- Return new states ---
  return(list(
    YL_C = YL_C,   # Carbon in young labile pool (t/ha)
    YR_C = YR_C,   # Carbon in young refractory pool (t/ha)
    SOC_C = SOC_C,  # Carbon in soil organic matter (t/ha)
    oss = oss
  ))
}

# ==============================================================================
#### MODEL PARAMETERS ####
# ==============================================================================

# One value for each elevation category
# organised as c(low, intermediate, high)

# --- VARIABLES DERIVED FROM iLAND ---

# Soil parameters (same for all elevations)
sp_list <- list(
  el = 0.1520,     # Microbial efficiency in labile pool
  er = 0.3190,     # Microbial efficiency in refractory pool
  mH = 0.2200      # Humification rate
)
sp = sp_list

# Further soil and environmental parameters
Kyl = NA                                # Litter decomp rate - defined in next section
Kyr = NA                                # Deadwood decomp rate - defined in next section
RE = c(0.8414, 0.6813, 0.5064)          # Climate modifier

# Carbon inputs under HEALTHY mountain pine stands
InputLab_C <- c(3.7273, 2.0527, 1.2239)  # Labile input to refractory pool (t/ha)
InputRef_C <- c(5.1481, 3.5228, 2.0256)  # Deadwood input to refractory pool (t/ha)

# Initial carbon pools under HEALTHY mountain pine stands
YL_C_init <- c(12.3913, 8.9807, 8.2594)   # Initial carbon in young labile pool (t/ha)
YR_C_init <- c(8.9623, 7.7192, 6.9302)    # Initial carbon in young refractory pool (t/ha)

# Live carbon available as inputs upon mountain pine death
foliage_C = c(6.474402, 2.646155, 1.297102)   # foliage + fine roots (t/ha)
woody_C = c(98.3658, 68.67399, 38.77613)      # stems + branches + coarse roots (t/ha)

# --- VARIABLES DERIVED FROM FIELD DATA ---

# Soil organic carbon by mountain pine health status
healthy_SOC = c(39.0258, 72.5112, 96.3888)
ailing_SOC = c(60.9152, 57.0527, 137.2102)
unstocked_SOC = c(17.4830, 18.5320, 50.2098)

# Upper confidence intervals for unstocked condition (t/ha)
# Used as threshold for determining when area reaches unstocked state
# unstocked_means <- c(17.4830, 18.5320, 50.2098) # mean SOC in all unstocked plots
# unstocked_sd <- c(18.7899, 19.7060, 26.5893)    # SOC std. dev. in all unstocked plots
# unstocked_samples <- c(8, 8, 9)                 # sample size of all unstocked plots
# CI <- c(
#   mean(sample) - 1.96 * sd(sample)/sqrt(sample_size),
#   mean(sample) + 1.96 * sd(sample)/sqrt(sample_size)
# )
unstocked_upper_CI <- c(30.5037, 32.1876, 67.581)

# ==============================================================================
#### FIND DECOMPOSITION RATES (Ko, Kyl, Kyr) ####
# ==============================================================================

# Function stablestates:
# Calculates decomposition rates (Ko, Kyl, Kyr) based on healthy steady-state
# and runs a multi-year simulation to confirm system stability
# Returns list w/ estimated decomposition rates by plot condition and elevation

# Parameters explained:

# InputLab_C = input to labile pool in healthy state
    # from iLand simulations (see section above)
# InputRef_C = input to refractory pool in healthy state
    # from iLand simulations (see section above)
# healthy_SOC = SOC_C_init in healthy state
    # same as SOC in steady-state (oss in function calculateYear)
# YL_C_init = initial carbon in young labile pool
    # same as YL_C in ss (ylss in function calculateYear)
# YR_C_init = initial carbon in young refractory pool
    # same as YR_C in ss (yrss in function calculateYear)

stablestates <- function(InputLab_C, InputRef_C, YL_C_init, YR_C_init, SOC_C_init, RE, sp, years) {
  
  elevations <- c("low", "intermediate", "high")

  # Initialise dataframes for results
  plot_df <- data.frame(
    year = numeric(),
    SOC_C = numeric(),
    elevation = character()
  )
  
  decomp_values <- data.frame(
    elevation = character(),
    Ko = numeric(),
    Kyl = numeric(),
    Kyr = numeric()
  )
  
  # Loop through elevations
  for (i in seq_along(elevations)) {
    
    # Calculate Ko, Kyl, Kyr from steady-state equations
    total_in_C <- InputLab_C[i] + InputRef_C[i]
    Ko <- (sp$mH * total_in_C) / (SOC_C_init[i] * RE[i])    # SOM decomposition
    Kyl <- InputLab_C[i] / (YL_C_init[i] * RE[i])           # Labile decomposition 
    Kyr <- InputRef_C[i] / (YR_C_init[i] * RE[i])           # Refractory decomposition
    
    # Append to dataframe
    decomp_values <- rbind(
      decomp_values,
      data.frame(
        elevation = elevations[i],
        Ko = Ko,
        Kyl = Kyl,
        Kyr = Kyr
      )
    )

    # Run simulation to verify steady-state
    YL_C_values <- numeric(years)
    YR_C_values <- numeric(years)
    SOC_C_values <- numeric(years)
    
    for (t in 1:years) {
      output <- calculateYear(
        InputLab_C[i], InputRef_C[i],
        YL_C_init[i], YR_C_init[i],
        SOC_C_init[i], Kyl, Kyr, RE[i], sp, Ko
      )
      
      # Store results for this year
      YL_C_values[t] <- output$YL_C
      YR_C_values[t] <- output$YR_C
      SOC_C_values[t] <- output$SOC_C
      
      # Update values for next year
      YL_C_init[i] <- output$YL_C
      YR_C_init[i] <- output$YR_C
      SOC_C_init[i] <- output$SOC_C
    }
    
    # Add results to the combined dataframe
    plot_df <- rbind(
      plot_df,
      data.frame(
        year = 1:years,
        SOC_C = SOC_C_values,
        elevation = elevations[i]
      )
    )
  }
    
  # Plot visualisation
  combined_plot <- ggplot(plot_df, aes(x = year, y = SOC_C, colour = elevation, group = elevation)) +
    geom_line() +
    geom_point() +
    labs(
      x = "year",
      y = "Soil Organic Carbon (t ha-1)"
    ) +
    scale_y_continuous(
      limits = c(0, max(plot_df$SOC_C) + 10),
      breaks = seq(0, max(plot_df$SOC_C) + 10, by = 25)
    ) +
    scale_colour_manual(
      values = c("low" = "skyblue2", "intermediate" = "royalblue2", "high" = "darkblue"),
      limits = c("high", "intermediate", "low") # reorder legend
    ) +
    theme(
      panel.border = element_blank(),
      panel.grid.major.y = element_line(),
      panel.grid.minor.y = element_blank(),
      panel.grid.major.x = element_line(),
      panel.grid.minor.x = element_blank(),
      panel.background = element_rect(fill = "white", colour = NA),
      plot.background = element_rect(fill = "white", colour = NA),
      axis.line = element_blank(),
      axis.title.x = element_text(size = 13, margin = margin(t = 12), colour = "grey50"),
      axis.title.y = element_text(size = 13, margin = margin(r = 12), hjust = 1, colour = "grey50"),
      axis.text.x = element_text(size = 14, colour = "grey50"),
      axis.text.y = element_text(size = 14, colour = "grey50")
    )
  
  return(list(
    SOC_C_plot = combined_plot,
    SOC_C_values = plot_df,
    decomp_values = decomp_values
  ))

}

# Apply function
healthy_ss <- stablestates(
  InputLab_C, InputRef_C, YL_C_init, YR_C_init,
  healthy_SOC, RE, sp_list, years = 250
)

# Extract decomposition rates for subsequent simulations
healthy_ss$decomp_values # results in:
healthyKo = c(0.05946430, 0.02482922, 0.01464600)
healthyKyl = c(0.3574991, 0.3354879, 0.2926198)
healthyKyr = c(0.6826923, 0.6698496, 0.6666667)

# ==============================================================================
#### FIND UNSTOCKED INPUTLAB_C ####
# ==============================================================================

# Based formulae in function calculateYear:
# total_in_C <- InputLab_C + InputRef_C
# oss <- sp$mH * total_in_C / (Ko * RE)
# since InputRef_C in unstocked is 0 (no woody vegetation):
# InputLab_C <- (oss * Ko * Re) / sp$mH

# Applying formula to each elevation directly
# by mountain pine health condition:
iLab_unstocked_low <- 3.976052 #(17.4830 * 0.05946430 * 0.8414) / 0.22
iLab_unstocked_inter <- 1.424955 #(18.5320 * 0.02482922 * 0.6813) / 0.22
iLab_unstocked_high <- 1.692694 #(50.2098 * 0.01464600 * 0.5064) / 0.22

# Unstocked inputlab_C by elevation c(low, intermediate, high):
iLab_unstocked <- c(3.976052, 1.424955, 1.692694)

# ==============================================================================
#### SIMULATE CARBON CYCLE UPON DIE-OFF ####
# ==============================================================================

# --- BASIC CARBON CYCLE SIMULATION ---

# Function simulate_dieoff:
# Simulates carbon dynamics following mountain pine die-off, including:
# - Start at healthy carbon steady-state
# - Increased labile inputs from foliage/fine root while tree is ailing
# - Gradual deadwood inputs over 10 years after tree death...
#   ... w/ possibility of applying erosion effects at a SINGLE year (erosion_year)
# - Transition to new, unstocked carbon steady-state
# Returns list of simulation results by plot condition and elevation
# Function is used in the next section to calculate mean erosion over 10 years

# Parameters explained:

# foliage_C = initial aboveground carbon in foliage + fine roots
# woody_C = initial aboveground carbon in stems + branches + coarse roots
# InputLab_C, InputRef_C = labile, refractory inputs under healthy steady state
    # to be complemented by foliage, roots, wood carbon upon die-off
# SOC_C_init = initial soil organic matter carbon, from field data
# Ko, Kyl, Kyr = calculated decomposition rates under healthy steady state

simulate_dieoff <- function(
    RE, foliage_C, woody_C,
    InputLab_C, InputRef_C, YL_C_init, YR_C_init,
    sp, Ko, Kyl, Kyr, SOC_C_init, InputLab_f,
    dieoff_dur, erosion_pwr, erosion_year,
    sim_years
  ) {
  
  elevations <- c("low", "intermediate", "high")

  # Store values for plotting
  plot_df <- data.frame(
    elevation = character(),
    year = numeric(),
    SOC_C = numeric()
  )
  
  for (i in seq_along(elevations)) {
    
    # Initialise results for this elevation
    elevation_results <- data.frame(
      year = 1:sim_years,
      SOC_C = numeric(sim_years)
    )

    # Extract parameters for this elevation
    InputLab <- InputLab_C[i]
    InputRef <- InputRef_C[i]
    YL_C <- YL_C_init[i]
    YR_C <- YR_C_init[i]
    SOC_C <- SOC_C_init[i]
    RE_factor <- RE[i]
    Ko_factor <- Ko[i]
    Kyl_factor <- Kyl[i]
    Kyr_factor <- Kyr[i]
    InputLab_final <- InputLab_f[i]

    # Calculate disturbance inputs
    foliage_loss <- foliage_C[i] * (1/dieoff_dur)                     # 25% more foliage + fine roots from die-off
    total_deadwood <- woody_C[i]
    deadwood_input <- woody_C[i] / 10                                 # Woody C turned into deadwood after die-off
    years_since_dieoff <- 0                                           # Initialise counter for deadwood input

    # Annual simulation loop
    for (year in 1:sim_years) {

      # --- PHASE 1: DIE-OFF PERIOD ---
      if (year <= dieoff_dur) {

        InputLab <- InputLab + foliage_loss                           # Increased labile input
        InputRef <- InputRef                                          # Refractory input remains normal

      }

      # --- PHASE 2: POST-DEATH PERIOD ---
      if (year > dieoff_dur) {

        InputLab <- InputLab_final                                    # Reduced labile input
        years_since_dieoff <- years_since_dieoff + 1                  # Counter: years since die-off
        
        if (years_since_dieoff <= 10) {
          # Deadwood input period
          if (years_since_dieoff == erosion_year) {
          # Apply erosion to remaining SOC and deadwood

            SOC_C <- SOC_C * (1 - erosion_pwr)

            deadwood_input <- (
              (deadwood_input * (10 + 1 - erosion_year))               # Deadwood still available
              * (1 - erosion_pwr)                                      # Deadwood available after erosion
              ) / (10 + 1 - erosion_year)                              # New yearly deadwood input
            
            InputRef <- deadwood_input
            
          }
          
          InputRef <- deadwood_input
          
        } else {
          # No more deadwood inputs after 10 years since death
          InputRef <- 0
          
        }
      }
      
      # Calculate new carbon pools after this year
      year_results <- calculateYear(
        InputLab_C = InputLab,
        InputRef_C = InputRef,
        YL_C_init = YL_C,
        YR_C_init = YR_C,
        SOC_C_init = SOC_C,
        Kyl = Kyl_factor,
        Kyr = Kyr_factor,
        RE = RE_factor,
        sp = sp,
        Ko = Ko_factor
      )
      
      # Update pools for next iteration
      SOC_C <- year_results$SOC_C
      YL_C <- year_results$YL_C
      YR_C <- year_results$YR_C
      
      # Store results for this year
      elevation_results$SOC_C[year] <- SOC_C
    }
    
    elevation_results$elevation <- elevations[i]
    plot_df <- rbind(plot_df, elevation_results)
    plot_df <- plot_df[, c("elevation", "year", "SOC_C")]
    
  }

  # Visualisation
  combined_plot <- ggplot(plot_df, aes(x = year, y = SOC_C, colour = elevation, group = elevation)) +
    geom_line() +
    geom_point() +
    labs(
      x = "Year",
      y = "Soil Organic Carbon (t ha-1)"
    ) +
    scale_y_continuous(
      limits = c(0, max(plot_df$SOC_C) + 10),
      breaks = seq(0, max(plot_df$SOC_C) + 10, by = 15)
    ) +
    scale_colour_manual(
      values = c("low" = "skyblue2", "intermediate" = "royalblue2", "high" = "darkblue"),
      limits = c("high", "intermediate", "low") # reorder legend
    ) +
    theme(
      panel.border = element_blank(),
      panel.grid.major.y = element_line(colour = "grey80"),
      panel.grid.minor.y = element_blank(),
      panel.grid.major.x = element_line(),
      panel.grid.minor.x = element_blank(),
      panel.background = element_rect(fill = "white", colour = NA),
      plot.background = element_rect(fill = "white", colour = NA),
      axis.line = element_blank(),
      axis.title.x = element_text(size = 13, margin = margin(t = 12), colour = "grey50"),
      axis.title.y = element_text(size = 13, margin = margin(r = 12), hjust = 1, colour = "grey50"),
      axis.text.x = element_text(size = 14, colour = "grey50"),
      axis.text.y = element_text(size = 14, colour = "grey50")
    )
  
  return(list(
    results = plot_df,
    plot = combined_plot
  ))
}

# --- COMPREHENSIVE CARBON CYCLE SIMULATION ---
# -------------- (MAIN FUNCTION) --------------

# Function kobayashi_maru:
# Simulates carbon cycle based on function simulate_dieoff
# Calculates erosion effect as the mean of every erosion
#    event happening yearly over 10 years
# Calculates key transition points:
# - Tipping point: When SOC drops below the highest value
#    reached in the simulation (begin of carbon sink)
# - Unstocked threshold: When SOC reaches unstocked steady-state
# This function generates the main results presented in the publication.

kobayashi_maru <- function(
    erosion_year_values, RE, foliage_C, 
    woody_C, InputLab_C, InputRef_C, 
    YL_C_init, YR_C_init, sp, Ko, Kyl, Kyr, 
    SOC_C_init, InputLab_f, SOC_C_fin,
    dieoff_dur, erosion_pwr, sim_years
) {
  
  results_df <- data.frame(
    elevation = character(),
    erosion_year = numeric(),
    SOC_start = numeric(),
    SOC_at_dieoff = numeric(),
    year_tipping_point = numeric(),
    year_SOC_equals_unstocked = numeric()
  )
  
  plot_data <- data.frame()
  avg_data <- data.frame()
  elevations <- c("low", "intermediate", "high")
  unstocked_upper_CI <- c(30.5037, 32.1876, 67.581)
  
  # Run simulations for each erosion year
  for (erosion_year in erosion_year_values) {
    sim_results <- simulate_dieoff(
      RE, foliage_C, woody_C,
      InputLab_C, InputRef_C, YL_C_init, YR_C_init,
      sp, Ko, Kyl, Kyr, SOC_C_init, InputLab_f,
      dieoff_dur, erosion_pwr, erosion_year,
      sim_years
    )$results
    
    sim_results$erosion_year <- as.factor(erosion_year)
    plot_data <- rbind(plot_data, sim_results)
  }
  
  # Calculate mean SOC trajectories across years
  avg_data <- plot_data %>% 
    group_by(elevation, year) %>% 
    summarise(SOC_C = mean(SOC_C), .groups = 'drop')
  
  # Calculate results_df for each elevation based on avg_data
  results_df <- data.frame(
    elevation = character(),
    SOC_start = numeric(),
    SOC_at_dieoff = numeric(),
    year_tipping_point = numeric(),
    year_SOC_equals_start = numeric(),
    year_SOC_equals_unstocked = numeric()
  )
  
  for (elev in elevations) {
    elev_data <- subset(avg_data, elevation == elev)
    
    # SOC at simulation start and at mountain pine death
    SOC_start <- SOC_C_init[which(elevations == elev)]
    SOC_at_dieoff <- elev_data$SOC_C[dieoff_dur]
    
    # Find tipping point: first year AFTER max(SOC_C) where SOC_C drops below that max
    max_SOC <- max(elev_data$SOC_C)
    year_max <- elev_data$year[which.max(elev_data$SOC_C)]
    post_max <- subset(elev_data, year > year_max)
    drop_below_max <- post_max$year[which(post_max$SOC_C < max_SOC)[1]]
    
    # Find year when SOC falls below value of the start of the simulation
    reversed_data <- elev_data[order(elev_data$year, decreasing = TRUE), ]
    last_occurrence_year <- reversed_data$year[which(reversed_data$SOC_C >= SOC_start)[1]]
    year_SOC_equals_start <- last_occurrence_year + 1
    
    # Find year when SOC is assumed unstocked (SOC crosses upper confidence interval)
    year_SOC_equals_unstocked <- which(
      elev_data$SOC_C <= unstocked_upper_CI[which(elevations == elev)]
    )
    
    results_df <- rbind(results_df, data.frame(
      elevation = elev,
      SOC_start = SOC_start,
      SOC_at_dieoff = SOC_at_dieoff,
      year_tipping_point = ifelse(!is.na(drop_below_max), drop_below_max, NA),
      year_SOC_equals_start = ifelse(length(year_SOC_equals_start) > 0, min(year_SOC_equals_start), NA),
      year_SOC_equals_unstocked = ifelse(length(year_SOC_equals_unstocked) > 0, min(year_SOC_equals_unstocked), NA)
    ))
  }
  
  # Visualisation/publication plot
  
  # Ribbon parameters
  create_ribbon_data <- function(avg_data, results_df) {
    ribbon_data <- data.frame()
    all_years <- sort(unique(avg_data$year))
    elevations <- c("high", "intermediate", "low")
    interp_data <- data.frame()
    for (elev in elevations) {
      elev_data <- avg_data[avg_data$elevation == elev, ]
      interp_values <- approx(elev_data$year, elev_data$SOC_C, xout = all_years)
      interp_data <- rbind(interp_data, data.frame(
        year = all_years,
        SOC_C = interp_values$y,
        elevation = elev
      ))
    }
    
    for (elev in elevations) {
      elev_data <- interp_data[interp_data$elevation == elev, ]
      elev_results <- results_df[results_df$elevation == elev, ]
      
      tipping_year <- elev_results$year_tipping_point - 1 # removing one year for graphic purposes; ribbon starts at peak
      treeless_year <- elev_results$year_SOC_equals_unstocked
      
      if (elev == "high") {
        # High elevation ribbons go from intermediate elevation line to high elevation line
        interm_data <- interp_data[interp_data$elevation == "intermediate", ]
        ymin_values <- interm_data$SOC_C
      } else if (elev == "intermediate") {
        # intermediate elevation ribbons go from low elevation line to intermediate elevation line
        low_data <- interp_data[interp_data$elevation == "low", ]
        ymin_values <- low_data$SOC_C
      } else {
        # Low elevation ribbons go from 0 to low elevation line
        ymin_values <- rep(0, length(all_years))
      }
      
      # Carbon cycle phase 1: From tipping point to unstocked state
      phase1_indices <- elev_data$year >= tipping_year & elev_data$year <= treeless_year
      if (sum(phase1_indices) > 0) {
        ribbon_data <- rbind(ribbon_data, data.frame(
          year = elev_data$year[phase1_indices],
          SOC_C = elev_data$SOC_C[phase1_indices],
          elevation = elev,
          phase = "between_points",
          ymin = ymin_values[phase1_indices],
          ymax = elev_data$SOC_C[phase1_indices]
        ))
      }
      
      # Carbon cycle phase 2: After unstocked state
      phase2_indices <- elev_data$year >= treeless_year
      if (sum(phase2_indices) > 0) {
        ribbon_data <- rbind(ribbon_data, data.frame(
          year = elev_data$year[phase2_indices],
          SOC_C = elev_data$SOC_C[phase2_indices],
          elevation = elev,
          phase = "after_treeless",
          ymin = ymin_values[phase2_indices],
          ymax = elev_data$SOC_C[phase2_indices]
        ))
      }
    }
    
    return(ribbon_data)
  }
  
  ribbon_data <- create_ribbon_data(avg_data, results_df)
  
  # Apply ribbons to plot, define further parameters
  sensitivity_plot <- ggplot() +
    geom_ribbon(data = ribbon_data[ribbon_data$phase == "between_points" & ribbon_data$elevation == "low", ], 
                aes(x = year, ymin = ymin, ymax = ymax), 
                fill = "lightgrey", alpha = 0.5) +
    geom_ribbon(data = ribbon_data[ribbon_data$phase == "between_points" & ribbon_data$elevation == "intermediate", ], 
                aes(x = year, ymin = ymin, ymax = ymax), 
                fill = "lightgrey", alpha = 0.5) +
    geom_ribbon(data = ribbon_data[ribbon_data$phase == "between_points" & ribbon_data$elevation == "high", ], 
                aes(x = year, ymin = ymin, ymax = ymax), 
                fill = "lightgrey", alpha = 0.5) +
    geom_ribbon(data = ribbon_data[ribbon_data$phase == "after_treeless" & ribbon_data$elevation == "low", ], 
                aes(x = year, ymin = ymin, ymax = ymax), 
                fill = "grey60", alpha = 0.5) +
    geom_ribbon(data = ribbon_data[ribbon_data$phase == "after_treeless" & ribbon_data$elevation == "intermediate", ], 
                aes(x = year, ymin = ymin, ymax = ymax), 
                fill = "grey60", alpha = 0.5) +
    geom_ribbon(data = ribbon_data[ribbon_data$phase == "after_treeless" & ribbon_data$elevation == "high", ], 
                aes(x = year, ymin = ymin, ymax = ymax), 
                fill = "grey60", alpha = 0.5) +
    geom_line(data = plot_data, aes(x = year, y = SOC_C, 
                                    group = interaction(elevation, erosion_year)),
              color = "grey60", alpha = 0, linewidth = 1) +
    geom_line(data = avg_data, aes(x = year, y = SOC_C, 
                                   color = elevation, group = elevation),
              linewidth = 3) +
    labs(x = "Year", y = expression(bold(SOC~(SOC~(t~ha^{-1}))), colour = "Elevation") +
    scale_colour_manual(values = c("low" = "skyblue2", "intermediate" = "royalblue2", "high" = "darkblue"), 
                        limits = c("high", "intermediate", "low")) +
    scale_x_continuous(
      limits = c(0, sim_years),
      breaks = unique(c(seq(0, sim_years, by = 50), sim_years))
    ) +
    geom_point(
      data = data.frame(phase = factor(
        c("after_treeless", "between_points"),
        levels = c("between_points", "after_treeless"))
      ),
      aes(x = Inf, y = Inf, fill = phase),
      shape = 21, size = 0  # invisible point
    ) +
    scale_fill_manual(
      name = "Carbon cycle phase",
      values = c("after_treeless" = "grey60", "between_points" = "lightgrey"),
      labels = c("after_treeless" = "carbon source,\n unstocked condition", "between_points" = "carbon source")
    ) +
    guides(
      colour = guide_legend(order = 1),   # elevation legend
      fill = guide_legend(override.aes = list(shape = 22, size = 5, colour = NA), order = 2)  # carbon cycle legend
    ) +
    theme_minimal() +
    theme(
      legend.title = element_text(size = 18, colour = "grey50"),
      panel.grid.major.y = element_line(colour = "grey80"),
      panel.grid.minor.y = element_blank(),
      panel.grid.major.x = element_blank(),
      panel.grid.minor.x = element_blank(),
      legend.text = element_text(size = 18, colour = "grey50"),
      axis.title.x = element_text(size = 18, colour = "grey50", vjust = 5),
      axis.title.y = element_text(size = 22, margin = margin(r = 15), hjust = 1, colour = "grey50"),
      axis.text.x = element_text(size = 20, colour = "grey50", vjust = 5),
      axis.text.y = element_text(size = 20, colour = "grey50")
    )
  
  # Separate elevation data for supplementary sensitivity analyses
  # (see next section)
  low_avg_SOC <- subset(avg_data, elevation == "low")
  interm_avg_SOC <- subset(avg_data, elevation == "intermediate")
  high_avg_SOC <- subset(avg_data, elevation == "high")

  colnames(results_df) <- c(
    "Elevation",
    "SOC at year 1",
    "SOC at die-off",
    "Year Tipping point",
    "Year SOC < value at year 1",
    "Year SOC < unstocked threshold"
  )
  
  return(list(
    results_df = results_df,
    sensitivity_plot = sensitivity_plot,
    low_avg_SOC = low_avg_SOC,
    interm_avg_SOC = interm_avg_SOC,
    high_avg_SOC = high_avg_SOC
  ))
  
}

noerosion_sim <- kobayashi_maru(
  erosion_year_values = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 
  RE, foliage_C, woody_C, 
  InputLab_C, InputRef_C, YL_C_init, YR_C_init, 
  sp = sp_list, Ko = healthyKo, Kyl = healthyKyl, Kyr = healthyKyr,
  SOC_C_init = healthy_SOC, InputLab_f = iLab_unstocked, SOC_C_fin = unstocked_SOC,
  dieoff_dur = 5, erosion_pwr = 0, sim_years = 175
)

erosion_sim <- kobayashi_maru(
  erosion_year_values = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 
  RE, foliage_C, woody_C, 
  InputLab_C, InputRef_C, YL_C_init, YR_C_init, 
  sp = sp_list, Ko = healthyKo, Kyl = healthyKyl, Kyr = healthyKyr,
  SOC_C_init = healthy_SOC, InputLab_f = iLab_unstocked, SOC_C_fin = unstocked_SOC,
  dieoff_dur = 5, erosion_pwr = 0.2, sim_years = 175
)

# ==============================================================================
#### SENSITIVITY ANALYSES ####
# ==============================================================================

# Apply function kobayashi_maru with different parameters
# for the duration of mountain pine die-off
# and intensity of SOC removal by erosion intensity
# for supplementary data

# --- DIFFERENT DIE-OFF DURATIONS, ALL ELSE FIXED ---

# 2-year dieoff

dieoff_2y <- kobayashi_maru(
  erosion_year_values = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 
  RE, foliage_C, woody_C, 
  InputLab_C, InputRef_C, YL_C_init, YR_C_init, 
  sp = sp_list, Ko = healthyKo, Kyl = healthyKyl, Kyr = healthyKyr,
  SOC_C_init = healthy_SOC, InputLab_f = iLab_unstocked, SOC_C_fin = unstocked_SOC,
  dieoff_dur = 2, erosion_pwr = 0.2, sim_years = 150
)

# 5-year dieoff is the same as erosion_sim in previous section

# 10-year dieoff

dieoff_10y <- kobayashi_maru(
  erosion_year_values = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 
  RE, foliage_C, woody_C, 
  InputLab_C, InputRef_C, YL_C_init, YR_C_init, 
  sp = sp_list, Ko = healthyKo, Kyl = healthyKyl, Kyr = healthyKyr,
  SOC_C_init = healthy_SOC, InputLab_f = iLab_unstocked, SOC_C_fin = unstocked_SOC,
  dieoff_dur = 10, erosion_pwr = 0.2, sim_years = 150
)

# --- DIFFERENT EROSION INTENSITIES (POWER), ALL ELSE FIXED ---

# 0 erosion intensity (no erosion) is the same as noerosion_sim in previous section

# 10 % erosion intensity

erosionpwr_01 <- kobayashi_maru(
  erosion_year_values = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 
  RE, foliage_C, woody_C, 
  InputLab_C, InputRef_C, YL_C_init, YR_C_init, 
  sp = sp_list, Ko = healthyKo, Kyl = healthyKyl, Kyr = healthyKyr,
  SOC_C_init = healthy_SOC, InputLab_f = iLab_unstocked, SOC_C_fin = unstocked_SOC,
  dieoff_dur = 5, erosion_pwr = 0.1, sim_years = 150
)

# 20 % erosion intensity is the same as erosion_sim in previous section

# 40 % erosion intensity

erosionpwr_04 <- kobayashi_maru(
  erosion_year_values = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 
  RE, foliage_C, woody_C, 
  InputLab_C, InputRef_C, YL_C_init, YR_C_init, 
  sp = sp_list, Ko = healthyKo, Kyl = healthyKyl, Kyr = healthyKyr,
  SOC_C_init = healthy_SOC, InputLab_f = iLab_unstocked, SOC_C_fin = unstocked_SOC,
  dieoff_dur = 5, erosion_pwr = 0.4, sim_years = 150
)

# --- CODE FOR SUPPLEMENTARY SENSITIVITY PLOT ---

# Plot results of each sensitivity analysis above

# Die-off durations:

low_2y <- dieoff_2y$low_avg_SOC %>% mutate(elevation = "low", dieoff_dur = "2y")
interm_2y <- dieoff_2y$interm_avg_SOC %>% mutate(elevation = "intermediate", dieoff_dur = "2y")
high_2y <- dieoff_2y$high_avg_SOC %>% mutate(elevation = "high", dieoff_dur = "2y")

low_5y <- dieoff_5y$low_avg_SOC %>% mutate(elevation = "low", dieoff_dur = "5y")
interm_5y <- dieoff_5y$interm_avg_SOC %>% mutate(elevation = "intermediate", dieoff_dur = "5y")
high_5y <- dieoff_5y$high_avg_SOC %>% mutate(elevation = "high", dieoff_dur = "5y")

low_10y <- dieoff_10y$low_avg_SOC %>% mutate(elevation = "low", dieoff_dur = "10y")
interm_10y <- dieoff_10y$interm_avg_SOC %>% mutate(elevation = "intermediate", dieoff_dur = "10y")
high_10y <- dieoff_10y$high_avg_SOC %>% mutate(elevation = "high", dieoff_dur = "10y")

supp_dieoff <- bind_rows(
  low_2y, interm_2y, high_2y,
  low_5y, interm_5y, high_5y,
  low_10y, interm_10y, high_10y
)

supp_dieoff$group_label <- interaction(supp_dieoff$elevation, supp_dieoff$dieoff_dur, sep = ", dead in ")

color_map <- c(
  "low, dead in 5y" = "skyblue2", "intermediate, dead in 5y" = "royalblue2", "high, dead in 5y" = "darkblue",
  "low, dead in 2y" = "grey70", "intermediate, dead in 2y" = "grey40", "high, dead in 2y" = "grey30",
  "low, dead in 10y" = "tan", "intermediate, dead in 10y" = "sandybrown", "high, dead in 10y" = "saddlebrown"
)

legend_order <- c(
  "high, dead in 10y", "high, dead in 5y", "high, dead in 2y",
  "intermediate, dead in 10y", "intermediate, dead in 5y", "intermediate, dead in 2y",
  "low, dead in 10y", "low, dead in 5y", "low, dead in 2y"
)

alpha_map <- c(
  "low, dead in 5y" = 1, "intermediate, dead in 5y" = 1, "high, dead in 5y" = 1,
  "low, dead in 2y" = 0.5, "intermediate, dead in 2y" = 0.5, "high, dead in 2y" = 0.5,
  "low, dead in 10y" = 0.5, "intermediate, dead in 10y" = 0.5, "high, dead in 10y" = 0.5)

supp_dieoff_plot <- ggplot(supp_dieoff, aes(
  x = year, y = SOC_C,
  colour = group_label, 
  group = group_label,
  alpha = group_label
  )
) +
  geom_line(linewidth = 1.2) +
  scale_colour_manual(values = color_map, breaks = legend_order) +
  scale_alpha_manual(values = alpha_map) +
  labs(x = "Year", y = "Soil Organic Carbon (t ha-1)") +
  theme_minimal() +
  theme(
    legend.title = element_blank(),
    panel.grid.major.y = element_line(colour = "grey80"),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    axis.title.x = element_text(size = 13, colour = "grey50"),
    axis.title.y = element_text(size = 13, margin = margin(r = 12), hjust = 1, colour = "grey50"),
    axis.text.x = element_text(size = 14, colour = "grey50"),
    axis.text.y = element_text(size = 14, colour = "grey50")
  ) + 
  guides(alpha = "none")

# Erosion intensities:

low_01 <- erosionpwr_01$low_avg_SOC %>% mutate(elevation = "low", erosion_pwr = "10%")
interm_01 <- erosionpwr_01$interm_avg_SOC %>% mutate(elevation = "intermediate", erosion_pwr = "10%")
high_01 <- erosionpwr_01$high_avg_SOC %>% mutate(elevation = "high", erosion_pwr = "10%")

low_02 <- dieoff_5y$low_avg_SOC %>% mutate(elevation = "low", erosion_pwr = "20%")
interm_02 <- dieoff_5y$interm_avg_SOC %>% mutate(elevation = "intermediate", erosion_pwr = "20%")
high_02 <- dieoff_5y$high_avg_SOC %>% mutate(elevation = "high", erosion_pwr = "20%")

low_04 <- erosionpwr_04$low_avg_SOC %>% mutate(elevation = "low", erosion_pwr = "40%")
interm_04 <- erosionpwr_04$interm_avg_SOC %>% mutate(elevation = "intermediate", erosion_pwr = "40%")
high_04 <- erosionpwr_04$high_avg_SOC %>% mutate(elevation = "high", erosion_pwr = "40%")

supp_erosion <- bind_rows(
  low_01, interm_01, high_01,
  low_02, interm_02, high_02,
  low_04, interm_04, high_04
)

supp_erosion$group_label <- interaction(supp_erosion$elevation, supp_erosion$erosion_pwr, sep = ", erosion ")

color_map <- c(
  "low, erosion 20%" = "skyblue2", "intermediate, erosion 20%" = "royalblue2", "high, erosion 20%" = "darkblue",
  "low, erosion 10%" = "grey70", "intermediate, erosion 10%" = "grey40", "high, erosion 10%" = "grey30",
  "low, erosion 40%" = "tan", "intermediate, erosion 40%" = "sandybrown", "high, erosion 40%" = "saddlebrown"
)

legend_order <- c(
  "high, erosion 40%", "high, erosion 20%", "high, erosion 10%",
  "intermediate, erosion 40%", "intermediate, erosion 20%", "intermediate, erosion 10%",
  "low, erosion 40%", "low, erosion 20%", "low, erosion 10%"
)

alpha_map <- c(
  "low, erosion 20%" = 1, "intermediate, erosion 20%" = 1, "high, erosion 20%" = 1,
  "low, erosion 10%" = 0.5, "intermediate, erosion 10%" = 0.5, "high, erosion 10%" = 0.5,
  "low, erosion 40%" = 0.5, "intermediate, erosion 40%" = 0.5, "high, erosion 40%" = 0.5)

supp_erosion_plot <- ggplot(supp_erosion, aes(
  x = year, y = SOC_C,
  colour = group_label, 
  group = group_label,
  alpha = group_label
)
) +
  geom_line(linewidth = 1.2) +
  scale_colour_manual(values = color_map, breaks = legend_order) +
  scale_alpha_manual(values = alpha_map) +
  labs(x = "Year", y = "Soil Organic Carbon (t ha-1)") +
  theme_minimal() +
  theme(
    legend.title = element_blank(),
    panel.grid.major.y = element_line(colour = "grey80"),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    axis.title.x = element_text(size = 13, colour = "grey50"),
    axis.title.y = element_text(size = 13, margin = margin(r = 12), hjust = 1, colour = "grey50"),
    axis.text.x = element_text(size = 14, colour = "grey50"),
    axis.text.y = element_text(size = 14, colour = "grey50")
  ) + 
  guides(alpha = "none")

ggarrange(
  noerosion_plot + labs(tag = "A") + theme(plot.margin = margin(10, 30, 10, 30), plot.tag = element_text(size = 24, face = "bold")),
  erosion_plot + labs(tag = "B") + theme(plot.margin = margin(10, 30, 10, 30), plot.tag = element_text(size = 24, face = "bold")),
  ncol = 2
)
